Синтаксис CSS
селектор {
    свойство: значение;
    свойство2: значение2;
}

1-й способ
Селектор{свойство: значение;свойство2: значение2;}

2-й способ
Селектор
{
    свойство: значение;
    свойство2: значение2;
}

3-й способ
Селектор {
    свойство: значение;
    свойство2: значение2;
}



Комментарии в CSS
/* Внешний вид комментария */
p {
    color: blue;
}
/*
Стили
для
параграфа
*/

Важно! Если вы вы хотите быстро закомментировать несколько строк css, нужно
выделить их и нажать ctrl + /. Если вы используете операционную систему MacOs то
горячие клавиши будут command + / . (Данный набор горячих клавиш будет работать в
редакторе кода Visual Studio Code)



Способы объявления CSS

1. Inline-стили.
2. Стили в разделе head.
3. Внешний CSS-файл.

Inline-стили
<body style="background: green;">
    <h1 style="color: blue; text-align: center;">
        Заголовок
    </h1>
</body>

Стили в разделе head
<head>
    <style>
        body {
            background: green;
        }
        h1 {
            color: blue;
            text-align: center;
        }
    </style>
</head>

Внешний CSS-файл
Создаём файл с расширением .css.
style.css

body {
    background: green;
}
h1 {
    color: blue;
    text-align: center;
}
В нужном HTML-файле этот файл подключаем.
index.html
<head>
    <link rel="stylesheet" href="style.css">
</head>

Важно: если вы хотите быстро подключить файл стилей, вам необходимо внутри тега
<head> добавить текст link:css и нажать клавишу tab, так вы получите ссылку
подключение.


Селекторы тегов
html 
<h1>Для всех заголовков первого уровня цвет
текста будет синим</h1>
css
h1 {
    color: blue;
}

html 
<p>Lorem ipsum dolor sit amet, consectetur
adipisicing elit. Placeat, ab.</p>
<p>Lorem ipsum dolor sit amet, consectetur
adipisicing elit. Placeat, ab.</p>
<p>Lorem ipsum dolor sit amet, consectetur
adipisicing elit. Placeat, ab.</p>
css
p {
    background: #ccc;
    color: green;
    font-size: 20px;
    font-weight: 600;
    line-height: 20px;
}

Селекторы идентификаторов (id)
html 
<p id=”text”>Цвет фона параграфа будет
серым</p>
css
#text {
    background: #ccc;
}
Важно! Этот способ для создания стилей не используется, так как, возможно, над
проектом работает несколько разработчиков. Мы не сможем сделать так, чтобы они
придумывали разные названия, обязательно будут пересечения, которых быть не
должно.

Селекторы классов (class)
html 
<h1 class=”border”>Заголовок с рамкой</h1>
<p class=”border”>Параграф с рамкой</p>
 
css
.border {
    border: 1px solid black;
}



Свойства стилей
Единицы измерения в CSS

Относительные единицы измерения
    ● px — пиксель;
    ● % — процент;
    ● em — высота текущего шрифта.

Пиксели (px)
Пиксель px — это самая базовая, абсолютная и окончательная единица измерения. Количество
пикселей задаётся в настройках разрешения экрана. Один px — это как раз один такой пиксель на экране. Все значения браузер в итоге пересчитает в пиксели.

Пиксели могут быть дробными, например, размер можно задать в 16.5px. Это совершенно
нормально. Браузер сам использует дробные пиксели для внутренних вычислений.

К примеру, есть элемент шириной в 100px, его нужно разделить на три части — появляются
33.333...px. При окончательном отображении дробные пиксели округляются и становятся
целыми.

Проценты (%)
Проценты %, как и em — относительные единицы. Когда мы говорим «процент», возникает
вопрос: «Процент от чего?». Как правило, он берётся от значения свойства родителя с тем же
названием, но не всегда. Это очень важная особенность процентов, про которую, увы, часто забывают.

EM (em)
При создании параграфа или заголовка мы не указываем этим текстовым блокам размер
шрифта. Он задан автоматически. Мы можем заметить, что заголовок h1 больше, чем параграф p. В итоге получается лучше выставить коэффициент, который и будет определять, насколько
заголовок больше или меньше параграфа.
1em — текущий размер шрифта (стандартное значение 1em = 16px).
Можно брать любые пропорции от текущего шрифта: 2em, 0.5em и т. п.
Размеры в em относительные, они определяются по текущему контексту.


Абсолютные единицы измерения
    ● cm — сантиметр.
    ● mm — миллиметр.
    ● in — дюйм.
    ● pt — пункт.
    ● pc — пика.
К ним относятся единицы измерения, которые используются в обычной жизни. Но в
веб-страницах они применяются редко, поэтому использовать их нежелательно.



Свойства стилей CSS
Ширина и высота: width и height
img {
    height: 200px;
    width: 300px;
}
Можно задавать ширину и высоту в любых единицах измерения CSS. Если содержимое блока
превышает указанную высоту, высота элемента останется неизменной, а содержимое будет
отображаться поверх него

Из-за этой особенности может получиться наложение содержимого элементов друг на друга,
когда элементы в коде HTML идут последовательно. Чтобы этого не произошло, добавьте
overflow: auto к стилю элемента.



Фон элемента – background
background-color: #ff0;
background-image: url(img/photo.jpg);
background-position: top; (bottom | left | right | center)
background-repeat: repeat-x; (repeat-y | no-repeat)
background-size: cover; (contain)

1. background-color задает цвет фона, который мы всегда сможем определить в макете.
2. background-image используется, чтобы в качестве фона можно было установить
изображение. Для этого в значении свойства нужно указать путь к изображению в
скобках url.
3. background-position указывает, где будет располагаться фоновое изображение. Может
иметь значения: top, bottom, left, right, center.
4. background-repeat определяет, нужно ли повторять фоновое изображение: repeat-x —
изображение повторяется по горизонтали, repeat-y — по вертикали, no-repeat —
изображение не повторяется. По умолчанию у этого свойства установлено значение
repeat. Это означает, что изображение будет повторяться по горизонтали и по
вертикали.
5. background-size — размер изображения. Возможно, вы не хотите, чтобы изображение
занимало стандартные параметры. Поэтому можно выставить процентное значение или
универсальное cover, которое будет занимать все доступное пространство, contain —
доступное пространство по высоте или ширине, чтобы фоновое изображение
поместилось полностью.

background: #ff0 url(img/photo.jpg) top repeat-x;




border — рамка вокруг элемента

border-color: red; (#f00 | RGB(255, 0, 0))
border-style: solid; (dotted | dashed | groove | ridge | solid | double | inset
| outset)
border-width: 2px;

border тоже подразделяется на различные свойства:
1. border-color — цвет рамки.
2. border-style — стиль рамки, которая может быть разных значений: dotted, dashed, solid,
double, groove, ridge, inset, outset.
3. border-width задает толщину рамки, причём её можно задать для каждой из 4 сторон
отдельно:
    ● (1px 2px) — 1px: верхняя и нижняя, 2px: левая и правая;
    ● (1px 2px 3px) — 1px: верхняя, 2px: левая и правая, 3 нижняя;
    ● (1px 2px 3px 4px) — 1px: верхняя, 2px: правая, 3px: нижняя, 4px: левая.
Можно перечислять свойства в одну строку, разделяя их пробелом. В этом случае не важен
порядок следования свойств.
border: 1px solid black;
Каждую границу можно задавать отдельно, когда это необходимо, к примеру, только одна
граница.
border-top: 2px dotted green;
border-bottom: 3px double blue;
border-left: 1px solid red;
border-right: 4px inset #000;




Цвет текста — color

color: red;
color: #78fa2e;

Значение цвета текста, одно из самых простых и понятных свойств




Шрифт — font

font-family устанавливает шрифт текста.

font-family: "Gill Sans", serif;

1. serif — шрифты с засечками.
2. sans-serif — рубленые шрифты, без засечек.
3. cursive — курсивные шрифты.
4. fantasy — декоративные шрифты.
5. monospace — моноширинные шрифты.

Существует 5 основных семейств шрифтов. У каждого семейства есть несколько видов
шрифтов. Узнать о типах шрифтов и их семействах можете узнать из справочников . Можно через запятую указывать несколько шрифтов. Первым будет использоваться шрифт Gill Sans.
Если он не установлен на компьютер, то будет отображаться следующий шрифт. Название
шрифта заключают в кавычки, если он состоит из нескольких слов.

font-style: italic; (oblique | normal)
font-variant: small-caps;
font-weight: bold; (bolder | lighter| 100 | 200);
font-size: 20px; (small | medium | large);

1. font-style — стиль шрифта. Предустановлен шрифт в значении normal. italic — это
курсивное начертание, которое имитирует рукописный текст. oblique — наклонное
начертание. Оно получается путем наклона знаков вправо.
2. font-variant имеет только 2 значения. По умолчанию установлено значение normal и
small-caps, которое у строчных букв имитирует заглавные буквы, только уменьшенного
размера.
3. font-weight задает насыщенность шрифта. Можно указывать значения
предопределенными словами, например, bold — полужирный, bolder — жирный, lighter
— светлый. Насыщенность определяется цифрами от 100 до 900.
4. font-size определяет размер шрифта. Можно указывать в любых единицах измерения
или предопределенными словами. Определять стиль шрифта можно сокращенной
записью. В этом случае важен порядок следования значений.
Есть общее свойство font. На начальном этапе его не рекомендуется использовать,  так как его
будет сложно запомнить. Можно допустить ошибку в написании.




Работа с текстом

text-align: center; (justify | left | right)
text-decoration: none; (line-through | overline | underline | none)
text-transform: capitalize; (lowercase | uppercase)

1. text-align — выравнивание содержимого блока по горизонтали. Принимает 4 значения:
left, right, center и justify. Выравнивание происходит по ширине, то есть одновременно по
левому и по правому краю.
2. text-decoration применяется для следующего оформления текста: line-through —
перечеркивает текст, overline — задает линию над текстом, underline — под текстом
(подчеркивает текст), none (по умолчанию) — отменяет все эффекты.
3. text-transform используется для изменения регистра символов. capitalize — каждое
слово в предложении будет начинаться с заглавной буквы. При значении lowercase все
символы будут строчными, а при uppercase — заглавными.





Вложенность

При изучении тегов HTML мы рассматривали, что можно вкладывать одни HTML-теги в другие.
А при помощи CSS есть возможность управлять различными вложенными конструкциями. Для
управления вложенностью в CSS есть несколько специальных селекторов. Рассмотрим их на
примерах.

Контекстные селекторы

html 
<p class=”text”>
В этом параграфе <a href=“#”>эта ссылка</a>
будет размером 18px и красного цвета,
<a href=”#”>а эта будет обычной</a>.
</p>
css
.text a {
    font-size: 18px;
    color: red;
}



Группирование свойств

Группировку свойств нужно использовать, когда для разных элементов заданы одинаковые
стили. Старайтесь избегать повторения кода.

html (без группировки свойств) 
.title {
    text-align: center;
    color: blue;
    font-family: sans-serif;
}
.heading {
    text-align: center;
    color: blue;
    font-family: Arial;
}
.text {
    text-align: center;
    color: blue;
    font-size: 12px;
}

html
.title, .heading, .text {
    text-align: center;
    color: blue;
}
.title {
    font-family: sans-serif;
}
.heading {
    font-family: Arial;
}
.text {
    font-size: 12px;
}

Чтобы свойства группировать, необходимо записать их через запятую и присвоить одинаковые
стили. Дальше уже для каждого элемента задать уникальные стили



Приоритеты стилей в CSS

Можно столкнуться с ситуацией, когда при разработке сайтов задается определенное свойство
какому-нибудь элементу. Это свойство не работает, то есть элемент не приобретает заданный
стиль. Это происходит потому, что где-то уже был установлен конкретный стиль элементу.

Чтобы решить эту проблему и задать нужный стиль, нужно знать приоритеты применения
стилей. Существует такое понятие, как каскадирование, которое применяется тогда, когда
одному и тому же элементу пытаются присвоить разные стили. Например, мы всем
параграфам хотим присвоить сначала чёрный цвет, а потом зелёный. Какое правило должно
тогда примениться?

.title {
    color: black;
}
.title {
    color: green;
}

В этом случае все элементы с классом title будут зелеными. Потому что по правилам, если
одинаковому селектору присваивать одинаковые свойства, применяется тот стиль, который
стоит ниже.

Приоритеты источников стилей

1. Стиль автора документа обладает самым высоким приоритетом. Этот стиль задаёт сам
разработчик сайта.
2. Стиль, заданный пользователем в настройках браузера. Его может задать конечный
пользователь этого сайта, если подключит собственный файл стилей. Этот источник
будет менее приоритетным.
3. Стиль браузера определяется в его настройках. Этот источник обладает самым низким
приоритетом.

Приоритеты стилей автора

Рассмотрим приоритеты стилей автора проекта. Самое важное свойство — то, у которого после
значения свойства установлена директива !important.

h1 {
    color: black!important;
}
h1 {
    color: green;
}