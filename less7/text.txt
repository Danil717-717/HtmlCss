Псевдоклассы и псевдоэлементы

Существуют стили и элементы, которые мы встречаем на каждой странице, но они появляются
не сразу, а в момент взаимодействия с пользователем, хорошим примером будет эффект
наведения, меню нашего сайта выглядит так как в макете, а при наведении на элементы меню
они чаще всего меняют значение цвета текста или фона. Получается нам необходимо добавить
не просто класс, а псевдокласс, тот стиль, который будет отрабатывать в определенный момент
времени.

Псевдоклассы

С псевдоклассами добавляются особые классы к элементам. Выбираются объекты, которые:
    ● отсутствуют в структуре веб-страницы;
    ● нельзя выбрать с помощью обычных селекторов. Например, первая буква или первая строка одного абзаца.

Вы наверняка замечали на сайтах: когда наводите мышкой на конкретный пункт меню, он
меняет свой вид. У него изменяется цвет фона, цвет ссылки, даже шрифт или его размер. Это
происходит благодаря псевдоклассам. 
Рассмотрим их синтаксис.

cелектор:псевдокласс {
    свойство: значение;
}
a:hover {
    color: #ccc;
}

После селектора ставится двоеточие. Сразу после него без пробела указывается название
псевдокласса.



Псевдоклассы, определяющие состояние элементов

Начнём с самых часто используемых псевдоклассов, определяющие состояние,
простыми словами мы меняем состояние элемента к которому добавляем
псевдокласс.

1. a:link — ссылается на посещенную ссылку.
2. a:visited — ссылается на уже посещенную ссылку.
3. a:hover — ссылается на любой элемент, по которому проводят курсором мыши.
4. a:focus — ссылается на любой элемент, над которым находится курсор мыши.
5. a:active — ссылается на активированный пользователем элемент.
6. :valid — выберет поля формы, содержимое которых прошло проверку в браузере на
соответствие указанному типу.
7. :invalid — выберет поля формы, содержимое которых не соответствует указанному типу.
8. :enabled — выберет все доступные (активные) поля форм.
9. :disabled — выберет заблокированные поля форм, т. е. находящиеся в неактивном
состоянии.
10. :in-range — выберет поля формы, значения которых находятся в заданном диапазоне.
11. :out-of-range — выберет поля формы, значения которых не входят в установленный
диапазон.
12. :lang() — выбирает абзацы на указанном языке.
13. :not(селектор) — выберет элементы, которые не содержат указанный селектор.
Например, класс, идентификатор или селектор элемента :not([type="submit"]).
14. :checked — выбирает выделенные (выбранные пользователем) элементы.



Структурные псевдоклассы

1. :nth-child(odd) — выбирает нечётные дочерние элементы.
2. :nth-child(even) — выбирает чётные дочерние элементы.
3. :nth-child(3n) — выбирает каждый третий элемент среди дочерних.
4. :nth-child(3n+2) — выбирает каждый третий элемент, начиная со второго дочернего
элемента (+2).
5. :nth-child(n+2) — выбирает все элементы, начиная со второго.
6. :nth-child(3) — выбирает третий дочерний элемент.
7. :nth-last-child() — в списке дочерних элементов выбирает элемент с указанным
местоположением, аналогично с :nth-child(), но начиная с последнего, в обратную
сторону.
8. :first-child — позволяет оформить только самый первый дочерний элемент тега.
9. :last-child — позволяет форматировать последний дочерний элемент тега.
10. :only-child — выбирает элемент, являющийся единственным дочерним элементом.
11. :empty — выбирает элементы, у которых нет дочерних элементов.
12. :root — выбирает корневой элемент в документе (элемент html).



Псевдоклассы по типу дочернего элемента

1. :nth-of-type() — выбирает элементы по аналогии с :nth-child(), при этом берёт во
внимание только тип элемента.
2. :first-of-type — позволяет выбрать первый дочерний элемент.
3. :last-of-type — выбирает последний тег конкретного типа.
4. :nth-last-of-type() — выбирает элемент заданного типа в списке элементов в
соответствии с указанным местоположением начиная с конца
5. :only-of-type — выбирает единственный элемент указанного типа среди дочерних
элементов родительского элемента.




Оформление результатов проверки

Хотя веб-разработчики не могут оформлять сообщения об ошибках проверки, они могут
изменять внешний вид полей в зависимости от результатов их валидации. Например, можно
выделить поле с неправильным значением цветным фоном сразу же, когда браузер обнаружит
неправильные данные. Для этого требуется добавить несколько простых псевдоклассов
Доступны следующие опции:

Всё, что для этого требуется — это добавить несколько простых CSS3-псевдоклассов.

Доступны следующие опции:
1. required и optional Применяют форматирование к полю в зависимости от того,
использует ли это поле атрибут required или нет;
2. valid и invalid Применяют форматирование к полю в зависимости от правильности
введенного в него значения. Но не забывайте, что большинство браузеров не проверяет
данные, пока пользователь не попытается отправить форму, поэтому форматирование
полей с некорректными значениями не выполняется сразу же при введении такого
значения;
3. in-range и out-of-range Форматирование к полям, для которых используется атрибут min
или max, чтобы ограничить их значение определенным диапазоном значений.

Пример кода в css

form input:required
{
    background-color: lightyellow;
}

Пример использования псевдоклассов
<ul>
    <li>Первый элемент</li>
    <li>Второй элемент</li>
    <li>Третий элемент</li>
</ul>

li:first-child{
    font-size: 24px;
    color: #F23401;
}

Чтобы понять, как работает этот псевдокласс (first-child), рассмотрим простой пример. Зададим
элементу списка <li> псевдокласс first-child, и прописываем у него определённый стиль. Как
видно, маркированный список состоит из трёх элементов. Указанный стиль применится
ТОЛЬКО к первому элементу списка. Это происходит потому, что первый элемент списка <li>
будет первым дочерним у тега <ul>.

<ul>
    <li><a href=”#”>Первый элемент</a></li>
    <li><a href=”#”>Второй элемент</a></li>
    <li><a href=”#”>Третий элемент</a></li>
</ul>

li:first-child a {
    color: red;
}

Одно из самых простых правил добавления псевдоклассов — просто проговорить, что
требуется сделать.
Рассмотрим пример выше, есть список элементов, нам необходимо найти первый элемент
списка и ссылку внутри него, проговариваем, найти первый элемент списка li, и внутри него
ссылка, запись будет следующей li:first-child a { color: red; }




Комбинирование псевдоклассов

Бывают такие ситуации, что нужно использовать сразу два псевдокласса, именно для
таких ситуаций используется комбинирование.

Псевдоклассы комбинируются в одном селекторе и перечисляются через двоеточие:

/* При наведении на непосещенную ссылку цвет текста будет зеленым */
a:link:hover {
    color: #0F0;
}
/* При наведении на посещенную ссылку цвет текста будет красным*/
a:visited:hover {
    color: #F00;
}




Псевдоэлементы

Псевдоэлементы позволяют ввести несуществующие элементы в веб-документ и придать им
определённые стили. Псевдоэлементы появились ещё в CSS1, но пошли в релиз только в
CSS2.1. В самом начале в синтаксисе использовалось одно двоеточие, но в CSS3 используется
двойное двоеточие для отличия от псевдоклассов. Современные браузеры умеют понимать оба
типа синтаксиса псевдоэлементов, кроме Internet Explorer 8. Он воспринимает только одно
двоеточие. Поэтому надёжнее использовать одно. С помощью свойства content можно
изменить внешний вид части элемента.

Рассмотрим часто используемые псевдоэлементы:

1. :first-letter — выбирает первую букву каждого абзаца, применяется только к блочным
элементам.
2. :first-line — выбирает первую строку текста элемента, применяется только к блочным
элементам.
3. :before — вставляет генерируемое содержимое перед элементом.
4. :after — добавляет генерируемое содержимое после элемента.




Пример использования псевдоэлементов

<ul>
    <li>Первый элемент</li>
    <li>Второй элемент</li>
    <li>Третий элемент</li>
</ul>

li:after{
    content: "new";
    color: #F00;
}

После всех элементов списка li появится текст new красного цвета.



Выводы работы псевдоклассов и
псевдоэлементов.

Давайте представим любой сайт в сети интернет, на какие элементы мы чаще всего
наводим, конечно это ссылки и кнопки, но также стоит помнить про любые иконки,
которые мы можем встретить на странице (соцсети и тд). Плюс для блоков мы можем
добавлять не только текстовые элементы (10% кэшбек из предыдущего примера) но и
изображения (иконки)

Теперь предлагаю вспомнить формы изображений, которые у нас есть, это: png, jpeg,
gif, svg. Какой тут формат нас больше всего интересует, конечно же svg, так как у него
может меняться значение цвета при наведении, может быть масштабирование, без
потери качества, получается что данный формат отлично подходит для эффектов
наведения, предлагаю более подробно разобраться с данным форматом.




Использование SVG в HTML5

Использование <object> тега
Если планируется использовать более продвинутые функции SVG, такие, как применение
таблицы стилей CSS или внедрение скриптов, то тег HTML5 <object> один из вариантов.

<object type="image/svg+xml" data="image.svg" width="200" height="200" >
Ваш браузер не поддерживает SVG
</object>

Для старых браузеров, не поддерживающих SVG, можно использовать следующий метод:

<object type="image/svg+xml" data="SvgImg.svg" width="200" height="200">
<img src="SvgImg.png" width="200" height="200" alt="image format png" />
</object>

Браузер не понимающий SVG, проигнорирует тег <object> и перейдет к следующему тегу <img>
и обработает его, как обычный HTML-тег и выведет картинку.




Использование <iframe> тега

Так как браузеры могут отрисовывать по своим правилам SVG документы, то это дает
возможность загружать картинки внутри тегов <iframe>.

<iframe src="SvgImg.svg">
    <img src="SvgImg.png" width="200" height="200" alt="image format png" />
</iframe>

Это может быть хорошим методом, если вы хотите полностью отделить SVG-код и скрипт на
вашей главной странице.



Использование <img> тега

SVG-документ может быть добавлен на вашу веб страницу, как любое другое изображение:

<img src="image.svg" width="200" height="200" alt="image description">



Использование <svg> тега

Одним из самых простых способов добавления иконки в формате svg это как раз
использовать тег <svg>

При нажатии на любое изображение в векторном формате, вы можете скопировать код
svg, для этого вам необходимо нажать на него правой клавишей и выбрать “Copy as
SVG” . Мы как обычно работаем в программе Figma.


Использование CSS Background Image

SVG может быть использован в качестве CSS фона для любого элемента:

#AnyElement
{
    background-image: url(image.svg);
}

Как и при использовании тега <img> связывание, скриптование и другие методы
интерактивности будут недоступны.


